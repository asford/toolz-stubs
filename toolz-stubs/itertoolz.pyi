from typing import Any, Optional

def remove(predicate: Any, seq: Any): ...
def accumulate(binop: Any, seq: Any, initial: Any = ...) -> None: ...
def groupby(key: Any, seq: Any): ...
def merge_sorted(*seqs: Any, **kwargs: Any): ...
def interleave(seqs: Any) -> None: ...
def unique(seq: Any, key: Optional[Any] = ...) -> None: ...
def isiterable(x: Any): ...
def isdistinct(seq: Any): ...
def take(n: Any, seq: Any): ...
def tail(n: Any, seq: Any): ...
def drop(n: Any, seq: Any): ...
def take_nth(n: Any, seq: Any): ...
def first(seq: Any): ...
def second(seq: Any): ...
def nth(n: Any, seq: Any): ...
def last(seq: Any): ...
def get(ind: Any, seq: Any, default: Any = ...): ...
def concat(seqs: Any): ...
def concatv(*seqs: Any): ...
def mapcat(func: Any, seqs: Any): ...
def cons(el: Any, seq: Any): ...
def interpose(el: Any, seq: Any): ...
def frequencies(seq: Any): ...
def reduceby(key: Any, binop: Any, seq: Any, init: Any = ...): ...
def iterate(func: Any, x: Any) -> None: ...
def sliding_window(n: Any, seq: Any): ...
def partition(n: Any, seq: Any, pad: Any = ...): ...
def partition_all(n: Any, seq: Any) -> None: ...
def count(seq: Any): ...
def pluck(ind: Any, seqs: Any, default: Any = ...): ...
def join(leftkey: Any, leftseq: Any, rightkey: Any, rightseq: Any, left_default: Any = ..., right_default: Any = ...) -> None: ...
def diff(*seqs: Any, **kwargs: Any) -> None: ...
def topk(k: Any, seq: Any, key: Optional[Any] = ...): ...
def peek(seq: Any): ...
def peekn(n: Any, seq: Any): ...
def random_sample(prob: Any, seq: Any, random_state: Optional[Any] = ...): ...
def getter(index): ...
